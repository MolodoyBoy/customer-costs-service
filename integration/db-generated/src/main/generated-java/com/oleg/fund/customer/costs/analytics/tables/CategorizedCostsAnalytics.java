/*
 * This file is generated by jOOQ.
 */
package com.oleg.fund.customer.costs.analytics.tables;


import com.oleg.fund.customer.costs.analytics.Public;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CategorizedCostsAnalytics extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.categorized_costs_analytics</code>
     */
    public static final CategorizedCostsAnalytics CATEGORIZED_COSTS_ANALYTICS = new CategorizedCostsAnalytics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.categorized_costs_analytics.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.categorized_costs_analytics.amount</code>.
     */
    public final TableField<Record, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.categorized_costs_analytics.percent</code>.
     */
    public final TableField<Record, BigDecimal> PERCENT = createField(DSL.name("percent"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>public.categorized_costs_analytics.transactions_count</code>.
     */
    public final TableField<Record, Integer> TRANSACTIONS_COUNT = createField(DSL.name("transactions_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.categorized_costs_analytics.category_id</code>.
     */
    public final TableField<Record, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.categorized_costs_analytics.period_cost_analytics_id</code>.
     */
    public final TableField<Record, Integer> PERIOD_COST_ANALYTICS_ID = createField(DSL.name("period_cost_analytics_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.categorized_costs_analytics.average</code>.
     */
    public final TableField<Record, BigDecimal> AVERAGE = createField(DSL.name("average"), SQLDataType.NUMERIC, this, "");

    private CategorizedCostsAnalytics(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CategorizedCostsAnalytics(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.categorized_costs_analytics</code> table
     * reference
     */
    public CategorizedCostsAnalytics(String alias) {
        this(DSL.name(alias), CATEGORIZED_COSTS_ANALYTICS);
    }

    /**
     * Create an aliased <code>public.categorized_costs_analytics</code> table
     * reference
     */
    public CategorizedCostsAnalytics(Name alias) {
        this(alias, CATEGORIZED_COSTS_ANALYTICS);
    }

    /**
     * Create a <code>public.categorized_costs_analytics</code> table reference
     */
    public CategorizedCostsAnalytics() {
        this(DSL.name("categorized_costs_analytics"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<Record, Integer> getIdentity() {
        return (Identity<Record, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(CategorizedCostsAnalytics.CATEGORIZED_COSTS_ANALYTICS, DSL.name("categorized_costs_analytics_pkey"), new TableField[] { CategorizedCostsAnalytics.CATEGORIZED_COSTS_ANALYTICS.ID }, true);
    }

    @Override
    public CategorizedCostsAnalytics as(String alias) {
        return new CategorizedCostsAnalytics(DSL.name(alias), this);
    }

    @Override
    public CategorizedCostsAnalytics as(Name alias) {
        return new CategorizedCostsAnalytics(alias, this);
    }

    @Override
    public CategorizedCostsAnalytics as(Table<?> alias) {
        return new CategorizedCostsAnalytics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategorizedCostsAnalytics rename(String name) {
        return new CategorizedCostsAnalytics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategorizedCostsAnalytics rename(Name name) {
        return new CategorizedCostsAnalytics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategorizedCostsAnalytics rename(Table<?> name) {
        return new CategorizedCostsAnalytics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategorizedCostsAnalytics where(Condition condition) {
        return new CategorizedCostsAnalytics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategorizedCostsAnalytics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategorizedCostsAnalytics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategorizedCostsAnalytics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategorizedCostsAnalytics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategorizedCostsAnalytics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategorizedCostsAnalytics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CategorizedCostsAnalytics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategorizedCostsAnalytics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CategorizedCostsAnalytics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
